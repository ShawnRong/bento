type User {
    id: ID!
    email: String!
    name: String!
    role: String!
    active: String!
    password: String!
    created_at: String!
    updated_at: String!
    deleted_at: String!
    articles: [Article!]
    comments: [Comment!]
}

type Tag {
    id: ID!
    name: String!
    created_at: String!
    updated_at: String!
    deleted_at: String!
    articles: [Article!]!
}

type Article {
    id: ID!
    content: String!
    user: User!
    created_at: String!
    updated_at: String!
    deleted_at: String!
    tags: [Tag!]!
    comments: [Comment!]
}

type Comment {
   id: ID!
   content: String!
   user: User!
   created_at: String!
   updated_at: String!
   deleted_at: String!
   article: Article!
}

type Query {
    Users(limit: Int = 25, offset: Int = 0): [User!]!
    Me(id: Int!): User!
    Article(id: ID = 0, tag: String = ""): Article!
    Articles(limit: Int = 25, offset: Int = 0): [Article!]!
    Tags: [Tag!]!
}

input NewUser {
    email: String!
    name: String!
    password: String!
}

input NewArticle {
    content: String!
    userId: ID!
    tags: [ID!]
}

input NewTag {
    name: String!
}

input NewComment {
    content: String!
    userId: ID!
    articleId: ID!
}

type Mutation {
    register (input: NewUser!): User
    updateProfile (input: NewUser!): User
    createArticle (input: NewArticle!): Article
    deleteArticle(id: ID!): Article
    updateArticle (input: NewArticle!): Article
    createTag (input: NewTag!): Tag
    deleteTag(id: ID!): Tag
    createComment (input: NewComment!): Comment
    deleteComment(id: ID!): Comment
}
